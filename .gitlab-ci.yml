variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

before_script:
  - docker container prune -f --filter "until=1h"
  - docker ps -a --filter name=runner --filter status=exited -q | head -10 | xargs -r docker rm || true

stages:
  - cleanup_before
  - build
  - lint_format_typing_check
  - migrations
  - tests
  - deploy
  - cleanup_after

cleanup-before-job:
  stage: cleanup_before
  script:
    - docker ps -a --filter name=runner --filter status=exited -q | xargs -r docker rm || true
    - docker system prune -f --filter "until=2h"
  allow_failure: true

build-job:
  stage: build
  before_script:
    - cp ${ENV_MAIN} .env
    - cp ${ENV_TEST} .env.test
  script:
    - docker build -t notihub_img .
    - docker rmi $(docker images -f dangling=true -q)

lint-job:
  stage: lint_format_typing_check
  script:
    - docker run --rm --network notihub_net notihub_img poetry run ruff check

format-job:
  stage: lint_format_typing_check
  script:
    - docker run --rm --network notihub_net notihub_img poetry run ruff format --check

typing-job:
  stage: lint_format_typing_check
  script:
    - docker run --rm --network notihub_net notihub_img poetry run pyright

migrations-job:
  stage: migrations
  script:
    - docker start notihub_postgres
    - sleep 10
    - docker run --rm --network notihub_net notihub_img poetry run  alembic upgrade head

tests-job:
  stage: tests
  script:
    - docker run --rm --network notihub_net notihub_img poetry run pytest -s -v

deploy-job:
  stage: deploy
  script:
    - docker start notihub_redis
    - docker compose -f docker-compose-ci.yml up -d
    - docker start notihub_nginx
    - docker exec notihub_nginx nginx -s reload

cleanup-job:
  stage: cleanup_after
  script:
    - chmod +x ./delete-images-before.sh
    - ./delete-images-before.sh notihub_img:latest
    - docker ps -a --filter name=runner --filter status=exited -q | xargs -r docker rm || true
    - docker image prune -f
    - docker volume prune -f
  when: always
  allow_failure: true
